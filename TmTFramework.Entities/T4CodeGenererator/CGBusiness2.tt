<#@ template language="C#" hostspecific="True" #>
<#@include file="CGMultipleOutputHelper.ttinclude" #>
<#@include file="CGProjectDefineSetting.ttinclude" #>
<#@include file="CGDatabaseObjectCreator.ttinclude" #>
<# string LayerName="Business";#>

<# var manager = Manager.Create(Host, GenerationEnvironment); #>
<# manager.StartHeader(); #>

// Code generated by a template Hüsrev YILDIZ
//using TmTFramework.Core.Aspects.Postsharp.ChacheAspects;
//using TmTFramework.Core.Aspects.Postsharp.ValidationAspects;
//using TmTFramework.Core.CrossCuttingConcerns.Cashing.Microsoft;
//using TmTFramework.Business.ValidationRules.FluentValidation;
using TmTFramework.Business.Abstract;
using TmTFramework.DataAccess.Abstract;
using TmTFramework.Entities.Concrete;
using System.Collections.Generic;
using System;

namespace <#= ProjectName #>.<#= LayerName #>.Concrete.Managers
{

<# manager.EndBlock(); #>

<# foreach(var item in tablolar)
   {
      manager.StartNewFile(String.Format("{0}\\{1}.{2}\\{3}\\{4}Manager.cs", ProjectPath,ProjectName,LayerName,"Concrete\\Managers",item.Name )); 
#>
   

    public class <#= item.Name #>Manager:I<#= item.Name #>Service
    {
       private I<#= item.Name #>Dal _<#= item.Name.ToLower() #>Dal;

       public <#= item.Name #>Manager(I<#= item.Name #>Dal <#= item.Name.ToLower()#>Dal)
       {
           _<#= item.Name.ToLower() #>Dal = <#= item.Name.ToLower() #>Dal;
       }

       //[CacheAspect(typeof(MemoryCacheManager),120)]
       public List<<#= item.Name #>> GetAll()
       {
           return _<#= item.Name.ToLower() #>Dal.GetList();
       }

       public <#= item.Name #> GetById(Guid id)
       {
           return _<#= item.Name.ToLower() #>Dal.Get(h => h.Id == id);
       }



       //[FluentValidationAspect(typeof(<#= item #>Validatior))]
       //[CacheRemoAspect(typeof(MemoryCacheManager))]
       public <#= item.Name #> Add(<#= item.Name #> <#= item.Name.ToLower() #>)
       {
            //ValidatorTool.FluentValidate( new <#= item #>Validatior(), <#= item.Name #>);
           return _<#= item.Name.ToLower() #>Dal.Add(<#= item.Name.ToLower() #>);
       }

        //[FluentValidationAspect(typeof(<#= item.Name #>Validatior))]
        public <#= item.Name #> Update(<#= item.Name #> <#= item.Name.ToLower() #>)
        {
            //ValidatorTool.FluentValidate(new <#= item #>Validatior(), <#= item.Name #>);
            return _<#= item.Name.ToLower() #>Dal.Update(<#= item.Name.ToLower() #>);
        }

		 public void Delete(<#= item.Name #> <#= item.Name.ToLower() #>)
        {
            _<#= item.Name.ToLower() #>Dal.Delete(<#= item.Name.ToLower() #>);
        }
    }

<#     
      manager.EndBlock();
   }
#>

<# manager.StartFooter(); #>
}
<# manager.EndBlock(); #>

<# manager.Process(true); #>